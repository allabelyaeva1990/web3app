// src/pages/SellPage.tsx - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–æ–≤
import { useState, useCallback } from 'react'
import { useAccount, useBalance } from 'wagmi'
import { useSetAtom } from 'jotai'
import { addNotificationAtom, addTransactionsHistoryAtom, updateTransactionsHistoryAtom } from '../store/atoms'
import { POPULAR_TOKENS } from '../constants/tokens'
import type { Token } from '../store/atoms'
import type { Address } from 'viem'
import { Button, Card, InfoPanel, InfoRow, InputContainer, NumberInput, PageHeader, TokenSelector } from '../components'

export function SellPage() {
  const { address } = useAccount()
  const addNotification = useSetAtom(addNotificationAtom)
  const addToHistory = useSetAtom(addTransactionsHistoryAtom)
  const updateHistory = useSetAtom(updateTransactionsHistoryAtom)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
  const [tokenAmount, setTokenAmount] = useState('')
  const [selectedToken, setSelectedToken] = useState<Token>(POPULAR_TOKENS[1]) // USDC –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [isLoading, setIsLoading] = useState(false)

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω ETH
  const isSelectedTokenETH = selectedToken.address === '0x0000000000000000000000000000000000000000'

  // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
  const { data: tokenBalance } = useBalance({
    address,
    token: isSelectedTokenETH ? undefined : (selectedToken.address as Address),
    query: { enabled: !!address }
  })

  // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ETH (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - —á–µ—Ä–µ–∑ API –∏–ª–∏ –æ—Ä–∞–∫—É–ª —Ü–µ–Ω)
  const calculateETHAmount = useCallback((tokenAmount: string) => {
    if (!tokenAmount || isNaN(Number(tokenAmount))) return '0'
    
    // –ú–æ–∫–æ–≤—ã–µ –∫—É—Ä—Å—ã (ETH = $2000)
    const ethPrice = 2000
    const tokenPrices: Record<string, number> = {
      'ETH': 2000,
      'USDC': 1,
      'DAI': 1,
      'USDT': 1,
      'WBTC': 40000,
    }
    
    const tokenPrice = tokenPrices[selectedToken.symbol] || 1
    const usdValue = Number(tokenAmount) * tokenPrice
    const ethAmount = usdValue / ethPrice
    
    return ethAmount.toFixed(6)
  }, [selectedToken])

  // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ETH –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
  const ethAmount = calculateETHAmount(tokenAmount)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏
  const canSell = !!(
    address &&
    tokenAmount &&
    Number(tokenAmount) > 0 &&
    tokenBalance &&
    Number(tokenAmount) <= Number(tokenBalance.formatted) &&
    !isLoading
  )

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏
  const handleSell = useCallback(async () => {
    if (!canSell) return
    const id = Date.now().toString();
    setIsLoading(true)
    
    try {
      addNotification({
        type: 'info',
        title: 'üí∏ –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞—á–∞—Ç–∞',
        message: `–ü—Ä–æ–¥–∞–µ–º ${tokenAmount} ${selectedToken.symbol} –∑–∞ ${ethAmount} ETH`,
        duration: 5000
      })

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∫ –ø—Ä–æ–¥–∞–∂—É
      addToHistory({
        id,
        inputToken: selectedToken,
        outputToken: {
          address: '0x0000000000000000000000000000000000000000',
          symbol: 'ETH',
          decimals: 18,
          name: 'Ethereum'
        },
        inputAmount: tokenAmount,
        outputAmount: ethAmount,
        status: 'pending'
      })

      // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await new Promise(resolve => setTimeout(resolve, 3000))
      
      addNotification({
        type: 'success',
        title: '‚úÖ –ü—Ä–æ–¥–∞–∂–∞ —É—Å–ø–µ—à–Ω–∞!',
        message: `–ü–æ–ª—É—á–µ–Ω–æ ${ethAmount} ETH`,
        duration: 10000
      })

      updateHistory({
        id,
        updates: {
          status: 'success'
        }
      })
      
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setTokenAmount('')
      
    } catch (error) {
      addNotification({
        type: 'error',
        title: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏',
        message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        duration: 10000
      })
      addToHistory({
        id,
        inputToken: {
          address: '0x0000000000000000000000000000000000000000',
          symbol: 'ETH',
          decimals: 18,
          name: 'Ethereum'
        },
        outputToken: selectedToken,
        inputAmount: ethAmount,
        outputAmount: tokenAmount,
        status: 'failed'
      })
    } finally {
      setIsLoading(false)
    }
  }, [canSell, tokenAmount, ethAmount, selectedToken, addNotification, addToHistory, updateHistory])

  const handleMaxClick = useCallback(() => {
    if (tokenBalance) {
      const maxAmount = isSelectedTokenETH 
        ? Math.max(0, Number(tokenBalance.formatted) - 0.01) // –†–µ–∑–µ—Ä–≤ –Ω–∞ –≥–∞–∑ –¥–ª—è ETH
        : Number(tokenBalance.formatted)
      setTokenAmount(maxAmount.toString())
    }
  }, [tokenBalance, isSelectedTokenETH])
const formatTokenBalance = () => {
    if (!address) return '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'
    if (tokenBalance) return `${Number(tokenBalance.formatted).toFixed(4)} ${tokenBalance.symbol}`
    return `0.0000 ${selectedToken.symbol}`
  }

  const getButtonText = () => {
    if (isLoading) return '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂–∏...'
    if (!address) return '–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫'
    if (!tokenAmount || Number(tokenAmount) === 0) return '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤'
    if (tokenBalance && Number(tokenAmount) > Number(tokenBalance.formatted)) return `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${selectedToken.symbol}`
    return `üí∏ –ü—Ä–æ–¥–∞—Ç—å ${selectedToken.symbol} –∑–∞ ${ethAmount} ETH`
  }

  const getTokenPrice = () => {
    const prices: Record<string, number> = {
      'ETH': 2000, 'USDC': 1, 'DAI': 1, 'USDT': 1, 'WBTC': 40000
    }
    return prices[selectedToken.symbol] || 1
  }
  return (
    <div>
      <PageHeader 
        title="–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–æ–≤"
        subtitle="–ü—Ä–æ–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ ETH –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É"
        icon="üí∏"
        gradient="linear-gradient(135deg, #dc3545 0%, #fd7e14 100%)"
      />

      <Card>
        <InputContainer
          label="–ü—Ä–æ–¥–∞–µ—Ç–µ"
          balance={formatTokenBalance()}
          onMaxClick={tokenBalance && address ? handleMaxClick : undefined}
        >
          <div style={{ display: 'flex', gap: '16px', alignItems: 'center' }}>
            <NumberInput
              value={tokenAmount}
              onChange={setTokenAmount}
              placeholder="0.0"
            />
            <TokenSelector 
              selectedToken={selectedToken}
              onTokenChange={setSelectedToken}
              label="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"
            />
          </div>
        </InputContainer>

        {/* ‚úÖ –°—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑ */}
        <div style={{ textAlign: 'center', margin: '16px 0' }}>
          <div style={{
            width: '40px',
            height: '40px',
            backgroundColor: '#f8f9fa',
            border: '2px solid #e1e5e9',
            borderRadius: '50%',
            display: 'inline-flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: '20px'
          }}>
            ‚Üì
          </div>
        </div>

        {/* ‚úÖ –ë–ª–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è ETH */}
        <InputContainer
          label="–ü–æ–ª—É—á–∞–µ—Ç–µ (ETH)"
          balance={`–ö—É—Ä—Å: 1 ${selectedToken.symbol} = $${((Number(ethAmount) * 2000) / Number(tokenAmount || 1)).toFixed(6)} ETH`}
        >
          <div style={{ display: 'flex', gap: '16px', alignItems: 'center' }}>
            <NumberInput
              value={ethAmount}
              onChange={() => {}} // read-only
              placeholder="0.0"
              disabled={true}
            />
            <div style={{
              display: 'flex',
              alignItems: 'center',
              gap: '8px',
              padding: '8px 12px',
              backgroundColor: '#e3f2fd',
              borderRadius: '8px',
              fontSize: '16px',
              fontWeight: 'bold',
              color: '#1976d2'
            }}>
              <span>ETH</span>
            </div>
          </div>
        </InputContainer>

        {/* ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ */}
        {tokenAmount && Number(tokenAmount) > 0 && (
          <InfoPanel>
            <InfoRow label={`–¶–µ–Ω–∞ ${selectedToken.symbol}`} value={`$${getTokenPrice()}`} />
            <InfoRow label="–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å" value={`$${(Number(ethAmount) * 2000).toFixed(2)}`} />
            <InfoRow label="–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ç–∏" value="~0.005 ETH" />
          </InfoPanel>
        )}

        {/* ‚úÖ –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ */}
        <Button
          variant="danger"
          size="lg"
          fullWidth={true}
          disabled={!canSell}
          loading={isLoading}
          onClick={handleSell}
        >
          {getButtonText()}
        </Button>
      </Card>

      {/* ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div style={{ 
        marginTop: '20px', 
        fontSize: '12px', 
        color: '#999', 
        textAlign: 'center',
        backgroundColor: '#f8f9fa',
        padding: '16px',
        borderRadius: '12px'
      }}>
        <div style={{ marginBottom: '8px' }}>
          üí° <strong>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</strong>
        </div>
        <div>
          –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ç–æ–∫–µ–Ω—ã, –ø–æ–ª—É—á–∞–µ—Ç–µ ETH –ø–æ —Ç–µ–∫—É—â–µ–º—É —Ä—ã–Ω–æ—á–Ω–æ–º—É –∫—É—Ä—Å—É.
          –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
        </div>
      </div>
    </div>
  )
}