// src/pages/BuyPage.tsx - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
import { useState, useCallback } from 'react'
import { useAccount, useBalance } from 'wagmi'
import { useSetAtom } from 'jotai'
import { addNotificationAtom, addTransactionsHistoryAtom, updateTransactionsHistoryAtom } from '../store/atoms'
import { POPULAR_TOKENS } from '../constants/tokens'
import type { Token } from '../store/atoms'
import { Button, Card, InfoPanel, InfoRow, InputContainer, NumberInput, PageHeader, TokenSelector } from '../components'

export function BuyPage() {
  const { address } = useAccount()
  const addNotification = useSetAtom(addNotificationAtom)
  const addToHistory = useSetAtom(addTransactionsHistoryAtom)
  const updateHistory = useSetAtom(updateTransactionsHistoryAtom)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
  const [ethAmount, setEthAmount] = useState('')
  const [selectedToken, setSelectedToken] = useState<Token>(POPULAR_TOKENS[1]) // USDC –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [isLoading, setIsLoading] = useState(false)

  // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å ETH
  const { data: ethBalance } = useBalance({
    address,
    query: { enabled: !!address }
  })

  // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - —á–µ—Ä–µ–∑ API –∏–ª–∏ –æ—Ä–∞–∫—É–ª —Ü–µ–Ω)
  const calculateTokenAmount = useCallback((ethAmount: string) => {
    if (!ethAmount || isNaN(Number(ethAmount))) return '0'
    
    // –ú–æ–∫–æ–≤—ã–µ –∫—É—Ä—Å—ã (ETH = $2000)
    const ethPrice = 2000
    const tokenPrices: Record<string, number> = {
      'USDC': 1,
      'DAI': 1,
      'USDT': 1,
      'WBTC': 40000, // –ø—Ä–∏–º–µ—Ä–Ω–æ 20x –æ—Ç ETH
    }
    
    const tokenPrice = tokenPrices[selectedToken.symbol] || 1
    const usdValue = Number(ethAmount) * ethPrice
    const tokenAmount = usdValue / tokenPrice
    
    return tokenAmount.toFixed(Math.min(6, selectedToken.decimals))
  }, [selectedToken])

  // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
  const tokenAmount = calculateTokenAmount(ethAmount)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏
  const canBuy = !!(
    address &&
    ethAmount &&
    Number(ethAmount) > 0 &&
    ethBalance &&
    Number(ethAmount) <= Number(ethBalance.formatted) &&
    !isLoading
  )

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏
  const handleBuy = useCallback(async () => {
    if (!canBuy) return

    setIsLoading(true)
    const id = Date.now().toString();
    try {
      addNotification({
        type: 'info',
        title: 'üí∞ –ü–æ–∫—É–ø–∫–∞ –Ω–∞—á–∞—Ç–∞',
        message: `–ü–æ–∫—É–ø–∞–µ–º ${tokenAmount} ${selectedToken.symbol} –∑–∞ ${ethAmount} ETH`,
        duration: 5000
      })
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∫ –ø–æ–∫—É–ø–∫—É
      addToHistory({
        id,
        inputToken: {
          address: '0x0000000000000000000000000000000000000000',
          symbol: 'ETH',
          decimals: 18,
          name: 'Ethereum'
        },
        outputToken: selectedToken,
        inputAmount: ethAmount,
        outputAmount: tokenAmount,
        status: 'pending'
      })

      // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await new Promise(resolve => setTimeout(resolve, 3000))
      
      addNotification({
        type: 'success',
        title: '‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!',
        message: `–ü–æ–ª—É—á–µ–Ω–æ ${tokenAmount} ${selectedToken.symbol}`,
        duration: 10000
      })

      updateHistory({
        id,
        updates: {
          status: 'success'
        }
      })
      
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setEthAmount('')
      
    } catch (error) {
      addNotification({
        type: 'error',
        title: '‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏',
        message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        duration: 10000
      })
      addToHistory({
        id,
        inputToken: {
          address: '0x0000000000000000000000000000000000000000',
          symbol: 'ETH',
          decimals: 18,
          name: 'Ethereum'
        },
        outputToken: selectedToken,
        inputAmount: ethAmount,
        outputAmount: tokenAmount,
        status: 'failed'
      })
    } finally {
      setIsLoading(false)
    }
  }, [canBuy, ethAmount, tokenAmount, selectedToken, addNotification, addToHistory, updateHistory])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ETH (—Å —Ä–µ–∑–µ—Ä–≤–æ–º –Ω–∞ –≥–∞–∑)
  const handleMaxClick = useCallback(() => {
    if (ethBalance) {
      const maxAmount = Math.max(0, Number(ethBalance.formatted) - 0.01)
      setEthAmount(maxAmount.toString())
    }
  }, [ethBalance])

  const formatETHBalance = () => {
    if (!address) return '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'
    if (ethBalance) return `${Number(ethBalance.formatted).toFixed(4)} ETH`
    return '0.0000 ETH'
  }

  const getButtonText = () => {
    if (isLoading) return '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏...'
    if (!address) return '–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫'
    if (!ethAmount || Number(ethAmount) === 0) return '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É ETH'
    if (ethBalance && Number(ethAmount) > Number(ethBalance.formatted)) return '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH'
    return `üí∞ –ö—É–ø–∏—Ç—å ${selectedToken.symbol} –∑–∞ ${ethAmount} ETH`
  }

  return (
    <div>
      <PageHeader 
        title="–ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤"
        subtitle="–ö—É–ø–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –∑–∞ ETH –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É"
        icon="üí∞"
        gradient="linear-gradient(135deg, #28a745 0%, #20c997 100%)"
      />

      <Card>
        <InputContainer
          label="–ü–ª–∞—Ç–∏—Ç–µ (ETH)"
          balance={formatETHBalance()}
          onMaxClick={ethBalance && address ? handleMaxClick : undefined}
        >
          <div style={{ display: 'flex', gap: '16px', alignItems: 'center' }}>
            <NumberInput
              value={ethAmount}
              onChange={setEthAmount}
              placeholder="0.0"
            />
            <div style={{
              display: 'flex',
              alignItems: 'center',
              gap: '8px',
              padding: '8px 12px',
              backgroundColor: '#e3f2fd',
              borderRadius: '8px',
              fontSize: '16px',
              fontWeight: 'bold',
              color: '#1976d2'
            }}>
              <span>ETH</span>
            </div>
          </div>
        </InputContainer>

        <div style={{ textAlign: 'center', margin: '16px 0' }}>
          <div style={{
            width: '40px',
            height: '40px',
            backgroundColor: '#f8f9fa',
            border: '2px solid #e1e5e9',
            borderRadius: '50%',
            display: 'inline-flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: '20px'
          }}>
            ‚Üì
          </div>
        </div>

        <InputContainer
          label="–ü–æ–ª—É—á–∞–µ—Ç–µ"
          balance={`–ö—É—Ä—Å: 1 ETH = $${((Number(tokenAmount) / Number(ethAmount || 1)).toFixed(2))} ${selectedToken.symbol}`}
        >
          <div style={{ display: 'flex', gap: '16px', alignItems: 'center' }}>
            <NumberInput
              value={tokenAmount}
              onChange={() => {}} // read-only
              placeholder="0.0"
              disabled={true}
            />
            <TokenSelector 
              selectedToken={selectedToken}
              onTokenChange={setSelectedToken}
              label="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
              excludeToken={{
                address: '0x0000000000000000000000000000000000000000',
                symbol: 'ETH',
                decimals: 18,
                name: 'Ethereum'
              }}
            />
          </div>
        </InputContainer>

        {ethAmount && Number(ethAmount) > 0 && (
          <InfoPanel>
            <InfoRow label="–°—Ç–æ–∏–º–æ—Å—Ç—å ETH" value="~$2,000" />
            <InfoRow label="–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å" value={`$${(Number(ethAmount) * 2000).toFixed(2)}`} />
            <InfoRow label="–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ç–∏" value="~0.005 ETH" />
          </InfoPanel>
        )}

        <Button
          variant="success"
          size="lg"
          fullWidth={true}
          disabled={!canBuy}
          loading={isLoading}
          onClick={handleBuy}
        >
          {getButtonText()}
        </Button>
      </Card>

      <div style={{ 
        marginTop: '20px', 
        fontSize: '12px', 
        color: '#999', 
        textAlign: 'center',
        backgroundColor: '#f8f9fa',
        padding: '16px',
        borderRadius: '12px'
      }}>
        <div style={{ marginBottom: '8px' }}>
          üí° <strong>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</strong>
        </div>
        <div>
          –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ ETH, –ø–æ–ª—É—á–∞–µ—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–æ —Ç–µ–∫—É—â–µ–º—É —Ä—ã–Ω–æ—á–Ω–æ–º—É –∫—É—Ä—Å—É.
          –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
        </div>
      </div>
    </div>
  )
}