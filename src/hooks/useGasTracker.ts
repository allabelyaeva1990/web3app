// –•—É–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥–∞–∑–æ–≤—ã—Ö —Ü–µ–Ω –∏ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π
import { useQuery } from '@tanstack/react-query'
import { useMemo } from 'react'
import { GasService, type GasPrice, type GasEstimate } from '../services/GasService'
import { useTokenPrice } from './useTokenPrice'

interface UseGasTrackerOptions {
  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15 —Å–µ–∫)
  refetchInterval?: number
  // –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å
  enabled?: boolean
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω –Ω–∞ –≥–∞–∑
 * –ê–Ω–∞–ª–æ–≥ —Å–µ—Ä–≤–∏—Å–∞ –≤ Angular —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
 */
export function useGasTracker(options: UseGasTrackerOptions = {}) {
  const { refetchInterval = 15 * 1000, enabled = true } = options

  return useQuery<GasPrice>({
    queryKey: ['gasPrices'],
    queryFn: () => GasService.getCurrentGasPrices(),
    
    enabled,
    staleTime: 10 * 1000,        // 10 —Å–µ–∫ - –¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ
    gcTime: 2 * 60 * 1000,       // 2 –º–∏–Ω –≤ –ø–∞–º—è—Ç–∏
    refetchInterval,             // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫
    refetchOnWindowFocus: true,  // –ü—Ä–∏ —Ñ–æ–∫—É—Å–µ –æ–∫–Ω–∞
    refetchOnReconnect: true,    // –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ç–∏
    
    // Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è –≥–∞–∑–∞ (–±—ã—Å—Ç—Ä–µ–µ —á–µ–º –¥–ª—è —Ü–µ–Ω)
    retry: 2,
    retryDelay: 1000, // 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
  })
}

/**
 * –•—É–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
export function useTransactionCost(
  operationType: keyof ReturnType<typeof GasService.getGasLimits>,
  priority: 'slow' | 'standard' | 'fast' | 'instant' = 'standard'
) {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É ETH –¥–ª—è USD –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
  const { data: ethPrice } = useTokenPrice('ETH')
  
  return useQuery<GasEstimate & { usdCost?: string }>({
    queryKey: ['transactionCost', operationType, priority],
    queryFn: async () => {
      const gasLimits = GasService.getGasLimits()
      const gasLimit = gasLimits[operationType]
      
      const estimate = await GasService.estimateTransactionCost(gasLimit, priority)
      
      // –î–æ–±–∞–≤–ª—è–µ–º USD —Å—Ç–æ–∏–º–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω–∞ ETH
      if (ethPrice?.price) {
        const usdCost = (Number(estimate.totalCost) * ethPrice.price).toFixed(2)
        return { ...estimate, usdCost }
      }
      
      return estimate
    },
    
    enabled: !!operationType,
    staleTime: 10 * 1000,
    gcTime: 2 * 60 * 1000,
    refetchInterval: 15 * 1000,
  })
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –≥–∞–∑—É
 */
export function useGasRecommendation(maxWaitMinutes: number = 3) {
  return useQuery({
    queryKey: ['gasRecommendation', maxWaitMinutes],
    queryFn: () => GasService.getCurrentGasPrices(),
    
    staleTime: 15 * 1000,
    gcTime: 60 * 1000,
    refetchInterval: 20 * 1000,
  })
}

/**
 * –•—É–∫ —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–µ—Ä–∞–º–∏ –∏ —É—Ç–∏–ª–∏—Ç–∞–º–∏
 */
export function useGasUtils() {
  const { data: gasPrices, isLoading, error } = useGasTracker()
  const { data: ethPrice } = useTokenPrice('ETH')

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã (–∫–∞–∫ computed –≤ Angular)
  const utils = useMemo(() => ({
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã
    formatGasPrice: (gwei: number) => GasService.formatGasPrice(gwei),
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å USD
    formatGasCost: (ethCost: string) => 
      GasService.formatGasCost(ethCost, ethPrice?.price),
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ –ø–æ —Ü–≤–µ—Ç–∞–º
    getNetworkStatus: () => {
      if (!gasPrices) return { color: '#666', text: '–ó–∞–≥—Ä—É–∑–∫–∞...', icon: '‚è≥' }
      
      const congestion = gasPrices.networkCongestion
      const statusMap = {
        low: { color: '#28a745', text: '–ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞', icon: 'üü¢' },
        medium: { color: '#ffc107', text: '–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞', icon: 'üü°' },
        high: { color: '#dc3545', text: '–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞', icon: 'üî¥' }
      }
      
      return statusMap[congestion]
    },
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    getTimeRecommendation: (gasPrice: number) => {
      if (!gasPrices) return '–ó–∞–≥—Ä—É–∑–∫–∞...'
      
      if (gasPrice >= gasPrices.instant) return '~15 —Å–µ–∫—É–Ω–¥'
      if (gasPrice >= gasPrices.fast) return '~1 –º–∏–Ω—É—Ç–∞'  
      if (gasPrice >= gasPrices.standard) return '~3 –º–∏–Ω—É—Ç—ã'
      return '~5+ –º–∏–Ω—É—Ç'
    },
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—ã –≥–∞–∑–∞
    isReasonableGasPrice: (gasPrice: number) => {
      if (!gasPrices) return true
      return gasPrice >= gasPrices.slow && gasPrice <= gasPrices.instant * 1.5
    }
  }), [gasPrices, ethPrice])

  return {
    gasPrices,
    isLoading,
    error,
    ...utils
  }
}

/**
 * –•—É–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 * –ü–æ–ª–µ–∑–µ–Ω –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
 */
export function useGasComparison(operations: string[]) {
  const { data: ethPrice } = useTokenPrice('ETH')
  
  return useQuery({
    queryKey: ['gasComparison', operations],
    queryFn: async () => {
      const gasLimits = GasService.getGasLimits()
      const comparisons = []
      
      for (const operation of operations) {
        if (operation in gasLimits) {
          const estimates = await Promise.all([
            GasService.estimateTransactionCost(gasLimits[operation as keyof typeof gasLimits], 'slow'),
            GasService.estimateTransactionCost(gasLimits[operation as keyof typeof gasLimits], 'standard'),
            GasService.estimateTransactionCost(gasLimits[operation as keyof typeof gasLimits], 'fast')
          ])
          
          comparisons.push({
            operation,
            slow: estimates[0],
            standard: estimates[1], 
            fast: estimates[2]
          })
        }
      }
      
      return comparisons
    },
    
    enabled: operations.length > 0,
    staleTime: 30 * 1000,
    gcTime: 5 * 60 * 1000,
  })
}