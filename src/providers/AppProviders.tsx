// src/providers/AppProviders.tsx
import React from 'react'
import { BrowserRouter } from 'react-router-dom'
import { WagmiProvider } from 'wagmi'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { I18nextProvider } from 'react-i18next'
import { config } from '../utils/wagmi'
import i18n from '../i18n/config'

const createQueryClient = () => new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 30 * 1000, // 30 —Å–µ–∫—É–Ω–¥, –∫–∞–∫ –¥–æ–ª–≥–æ –¥–∞–Ω–Ω—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è "—Å–≤–µ–∂–∏–º–∏"
      gcTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç, –∫–æ–≥–¥–∞ —É–¥–∞–ª—è—Ç—å –∏–∑ –ø–∞–º—è—Ç–∏
      
      // üîÅ Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö RPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      retry: (failureCount, error) => {
        // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è 4xx –æ—à–∏–±–æ–∫ (–∫–∞–∫ HTTP interceptor –≤ Angular)
        if (error && 'status' in error && typeof error.status === 'number' && error.status >= 400 && error.status < 500) {
            return false;
        }
        return failureCount < 3
      },
      // üéØ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
      refetchOnWindowFocus: true,
      // üåê –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ç–∏
      refetchOnReconnect: true,
    },
    mutations: {
      // üí∏ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º - –æ–Ω–∏ –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã!
      retry: false,
    },
  },
})

interface AppProvidersProps {
  children: React.ReactNode
}

export function AppProviders({ children }: AppProvidersProps) {
  // üè≠ –°–æ–∑–¥–∞–µ–º QueryClient —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const queryClient = React.useMemo(() => createQueryClient(), [])
  
  // üé≠ –ö–æ–º–ø–æ–∑–∏—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (–ø–æ—Ä—è–¥–æ–∫ –í–ê–ñ–ï–ù!)
  // 1Ô∏è‚É£ WagmiProvider - —Å–∞–º—ã–π –≤–Ω–µ—à–Ω–∏–π (–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç Web3 –∫–æ–Ω—Ç–µ–∫—Å—Ç)
  // 2Ô∏è‚É£ QueryClientProvider - –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  // 3Ô∏è‚É£ I18nextProvider - –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
  // 4Ô∏è‚É£ BrowserRouter - —Ä–æ—É—Ç–∏–Ω–≥
  
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <BrowserRouter>
            {children}
          </BrowserRouter>
        </I18nextProvider>
      </QueryClientProvider>
    </WagmiProvider>
  )
}

// üîç –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø (—Ç–æ–ª—å–∫–æ –≤ development)
export function AppProvidersWithDevtools({ children }: AppProvidersProps) {
  const queryClient = React.useMemo(() => createQueryClient(), [])
  
  // üõ†Ô∏è Lazy loading DevTools (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)
  const ReactQueryDevtools = React.useMemo(() => {
    if (process.env.NODE_ENV !== 'development') return null
    
    try {
      // Dynamic import - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ development
      // eslint-disable-next-line @typescript-eslint/no-require-imports
      const { ReactQueryDevtools } = require('@tanstack/react-query-devtools')
      return ReactQueryDevtools
    } catch {
      console.warn('React Query DevTools –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
      return null
    }
  }, [])
  
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <BrowserRouter>
            {children}
            
            {/* üîß DevTools —Ç–æ–ª—å–∫–æ –≤ development */}
            {ReactQueryDevtools && (
              <ReactQueryDevtools 
                initialIsOpen={false}
                buttonPosition="bottom-left"
              />
            )}
          </BrowserRouter>
        </I18nextProvider>
      </QueryClientProvider>
    </WagmiProvider>
  )
}

export default process.env.NODE_ENV === 'development' 
  ? AppProvidersWithDevtools 
  : AppProviders